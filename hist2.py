import cv2
from PIL import Image
import numpy as np
a = [[34, 38, 49, 63, 54, 61, 65, 85, 97, 122, 134, 135, 126, 97, 70, 83, 70, 58, 72, 69, 40, 44, 45], [41, 43, 36, 53, 63, 95, 123, 137, 148, 159, 166, 171, 173, 169, 138, 104, 75, 63, 65, 63, 48, 35, 48], [42, 52, 48, 76, 102, 131, 144, 157, 167, 180, 191, 180, 185, 196, 182, 149, 107, 73, 70, 62, 53, 35, 45], [44, 63, 58, 110, 129, 143, 150, 160, 171, 184, 190, 180, 177, 189, 178, 163, 149, 123, 86, 62, 47, 40, 42], [49, 43, 84, 129, 140, 144, 157, 160, 170, 185, 192, 178, 179, 186, 176, 164, 159, 146, 116, 68, 50, 44, 42], [57, 60, 93, 135, 144, 145, 160, 160, 169, 176, 181, 180, 176, 176, 176, 173, 160, 149, 123, 70, 53, 37, 41], [50, 64, 101, 143, 145, 152, 159, 160, 170, 175, 174, 176, 171, 168, 169, 175, 164, 153, 128, 72, 60, 36, 37], [52, 71, 115, 144, 145, 157, 157, 159, 171, 178, 175, 175, 160, 150, 150, 157, 162, 151, 136, 78, 50, 38, 38], [56, 79, 132, 140, 137, 131, 128, 139, 148, 164, 171, 165, 154, 122, 121, 132, 140, 140, 139, 81, 55, 43, 40], [50, 74, 137, 131, 140, 147, 146, 142, 164, 170, 169, 164, 167, 140, 144, 157, 158, 145, 137, 93, 49, 46, 37], [61, 63, 132, 146, 167, 144, 120, 113, 139, 157, 160, 165, 143, 107, 114, 80, 109, 148, 142, 106, 46, 44, 38], [53, 57, 135, 166, 129, 95, 78, 124, 111, 140, 153, 176, 133, 121, 140, 109, 123, 114, 148, 129, 51, 50, 34], [54, 61, 146, 148, 131, 136, 136, 134, 139, 146, 158, 182, 157, 147, 145, 145, 151, 158, 159, 151, 66, 53, 44], [46, 76, 151, 144, 158, 149, 146, 145, 152, 147, 162, 186, 158, 161, 158, 162, 163, 163, 160, 153, 98, 110, 114], [118, 104, 151, 150, 154, 148, 144, 156, 155, 159, 172, 174, 160, 164, 165, 167, 161, 160, 160, 152, 134, 152, 142], [146, 153, 149, 160, 155, 158, 158, 167, 161, 139, 174, 154, 128, 156, 173, 169, 161, 162, 160, 154, 138, 142, 160], [150, 139, 152, 160, 160, 159, 160, 161, 149, 141, 165, 154, 138, 142, 176, 176, 173, 168, 160, 154, 139, 113, 149], [143, 125, 152, 164, 173, 165, 166, 160, 141, 141, 152, 144, 134, 161, 177, 175, 176, 172, 164, 152, 138, 133, 157], [138, 138, 148, 170, 176, 176, 165, 153, 151, 150, 141, 143, 165, 169, 169, 176, 176, 176, 163, 150, 135, 174, 167], [161, 154, 147, 171, 176, 176, 163, 168, 164, 144, 127, 125, 135, 165, 175, 175, 174, 175, 160, 147, 134, 154, 108], [105, 160, 149, 168, 176, 176, 172, 154, 123, 112, 112, 113, 114, 111, 131, 168, 175, 175, 160, 147, 67, 40, 32], [34, 38, 73, 162, 176, 176, 163, 145, 152, 152, 149, 148, 148, 152, 156, 165, 176, 169, 156, 136, 31, 32, 32], [34, 32, 32, 153, 176, 181, 176, 166, 173, 167, 155, 153, 160, 160, 164, 168, 174, 163, 153, 125, 31, 32, 32], [32, 32, 32, 90, 173, 188, 179, 178, 176, 166, 144, 144, 147, 159, 163, 163, 159, 153, 136, 119, 33, 32, 32], [32, 32, 32, 35, 137, 180, 179, 173, 164, 156, 144, 144, 150, 158, 158, 160, 151, 142, 123, 125, 37, 32, 32], [34, 32, 32, 32, 97, 154, 172, 170, 159, 157, 145, 146, 150, 152, 159, 154, 133, 121, 128, 133, 49, 32, 31], [32, 32, 32, 32, 81, 144, 143, 160, 176, 166, 152, 145, 144, 154, 150, 122, 121, 126, 142, 143, 58, 31, 32], [32, 32, 32, 32, 76, 155, 150, 140, 140, 147, 142, 141, 137, 131, 116, 123, 130, 140, 153, 145, 66, 32, 32]]

def read_all(n):
    otvet = [[[] for i in range(10)] for j in range(n)]
    for j in range(n):
        otvet[j][0] = cv2.imread(f"img/etalon/{j+1}.pgm",  cv2.IMREAD_GRAYSCALE)
    for i in range(n):
        for h in range(9):
            otvet[i][h+1] = cv2.imread(f"img/sh/s{i+1}/{h+2}.pgm",  cv2.IMREAD_GRAYSCALE)
    return otvet

def read_for_shatie(n):
    schitivaem = read_all(n)
    otvet = [[[[0 for b in range(92 // 4)] for a in range(112 // 4)] for i in range(10)] for j in range(n)]
    for j in range(n):
        for i in range(10):
            for a in range(112):
                for b in range(92):
                    otvet[j][i][a // 4][b // 4] += schitivaem[j][i][a][b]//16
    return otvet


def shatie_img(output, width, height, x, y):
    global mas_sh
    a = mas_sh[x][y]
    array = [[[0, 0, 0] for i in range(width * 4)]for j in range(height * 4)]
    for j in range(height):
        for i in range(width):
            for u in range(16):
                array[j * 4 + (u // 4)][i * 4 + (u % 4)][0] = a[j][i]
                array[j * 4 + (u // 4)][i * 4 + (u % 4)][1] = a[j][i]
                array[j * 4 + (u // 4)][i * 4 + (u % 4)][2] = a[j][i]
    array = np.array(array, dtype=np.uint8)
    img = Image.fromarray(array)
    img.save(output)


def rand_img(output, width, height, x, y):
    dotes = [[102, 87], [80, 83], [45, 14], [111, 31], [43, 25], [52, 33], [78, 67], [107, 37], [68, 62], [90, 87], [35, 82], [17, 54], [23, 33], [23, 14], [64, 17], [93, 90], [92, 53], [35, 58], [47, 1], [26, 60], [47, 50], [86, 54], [5, 12], [86, 32], [43, 14], [67, 61], [40, 4], [56, 74], [29, 37], [33, 0], [90, 57], [43, 7], [26, 42], [39, 52], [6, 65], [23, 57], [12, 73], [0, 0], [94, 30], [21, 16], [5, 51], [0, 60], [108, 58], [1, 77], [16, 51], [29, 52], [17, 49], [86, 34], [12, 60], [83, 1], [98, 3], [35, 17], [16, 72], [50, 85], [34, 49], [6, 80], [18, 3], [62, 28], [36, 46], [79, 18], [22, 59], [100, 76], [45, 9], [104, 53], [20, 1], [91, 46], [51, 23], [77, 57], [57, 71], [25, 47], [11, 75], [66, 33], [6, 8], [26, 49], [43, 1], [59, 50], [2, 79], [51, 10], [4, 7], [55, 10], [48, 74], [25, 67], [55, 85], [37, 7], [45, 37], [24, 36], [110, 16], [38, 31], [2, 50], [7, 88], [85, 6], [97, 7], [47, 54], [3, 66], [51, 51], [86, 73], [49, 72], [81, 21], [10, 48], [68, 59], [16, 85], [78, 74], [60, 32], [72, 46], [107, 6], [21, 24], [82, 46], [13, 2], [78, 44], [51, 11], [64, 91], [110, 52], [0, 62], [8, 78], [74, 53], [107, 39], [91, 68], [59, 3], [74, 61], [101, 90], [61, 22], [20, 80], [77, 8], [92, 36], [15, 53], [12, 35], [53, 73], [6, 76], [70, 17], [81, 29], [21, 79], [30, 20], [14, 90], [83, 60], [0, 68], [44, 47], [4, 29], [7, 52], [26, 69], [10, 22], [21, 83], [94, 62], [108, 85], [3, 79], [29, 32], [111, 73], [89, 83], [31, 41], [68, 61], [84, 79], [15, 29], [104, 30], [41, 57], [25, 29], [103, 86], [53, 23], [25, 74], [107, 32], [15, 3], [83, 89], [110, 59], [100, 54], [48, 18], [103, 38], [96, 26], [19, 74], [48, 3], [67, 30], [60, 68], [81, 27], [45, 54], [37, 63], [93, 43], [11, 1], [8, 11], [3, 12], [37, 75], [99, 41], [18, 59], [86, 71], [57, 8], [98, 46], [91, 7], [29, 46], [73, 18], [58, 84], [2, 8], [64, 1], [35, 29], [53, 75], [94, 73], [29, 26], [7, 6], [76, 4], [36, 46], [68, 74], [8, 15], [93, 40], [63, 54], [9, 81], [37, 91], [15, 36], [89, 9], [32, 66], [47, 36], [10, 42], [36, 56], [28, 4], [27, 47], [4, 84], [35, 90], [39, 63], [111, 90], [83, 63], [95, 0], [72, 23], [105, 62], [17, 40], [23, 69], [60, 11], [45, 28], [40, 12], [62, 66], [91, 72], [104, 85], [4, 85], [17, 5], [14, 57], [9, 25], [18, 1], [56, 46], [7, 20], [102, 84], [53, 12], [99, 72], [37, 77], [52, 61], [70, 90], [12, 49], [25, 25], [99, 36], [75, 74], [5, 17], [7, 39], [31, 74], [13, 82], [4, 85], [61, 66], [55, 77], [23, 3], [59, 74], [49, 1], [61, 14], [46, 65], [23, 42], [16, 33], [111, 33], [36, 73], [30, 46], [38, 79], [90, 45], [45, 85], [57, 72], [89, 5], [36, 16], [108, 82], [83, 9], [104, 91], [32, 25], [70, 47], [102, 19], [63, 74], [31, 48], [78, 68], [21, 15], [2, 0], [104, 37], [10, 6], [35, 74], [75, 43], [63, 45], [19, 11], [23, 0], [7, 42], [73, 15], [90, 28], [75, 18], [108, 21], [35, 50], [36, 11], [72, 46], [61, 60], [71, 73], [14, 37], [0, 70], [41, 33], [101, 32], [33, 17], [39, 57], [36, 48], [25, 24], [7, 65], [21, 20], [93, 62], [78, 36], [84, 37], [4, 74], [49, 75], [0, 45], [106, 43], [36, 87], [88, 58], [46, 42], [89, 15], [7, 64], [109, 88], [37, 6], [48, 26], [81, 11], [80, 30], [89, 36], [4, 8], [53, 67], [77, 82], [13, 42], [10, 6], [70, 82], [36, 11], [22, 74], [93, 52], [108, 33], [15, 25], [38, 75], [53, 11], [25, 7], [35, 60], [100, 88], [103, 38], [83, 38], [17, 86], [107, 58], [95, 51], [54, 85], [36, 61], [53, 82], [100, 2], [50, 35], [35, 8], [79, 66], [73, 83], [5, 57], [16, 47], [12, 77], [45, 49], [10, 18], [87, 11], [71, 91], [110, 9], [32, 38], [85, 69], [47, 74], [86, 53], [106, 60], [67, 68], [42, 87], [66, 12], [24, 3], [76, 23], [73, 45], [101, 83], [109, 42], [84, 65], [108, 39], [94, 86], [66, 1], [102, 9], [27, 40], [0, 57], [79, 49], [60, 45], [1, 63], [98, 32], [47, 9], [9, 73], [64, 72], [38, 54], [69, 38], [110, 52], [96, 52], [3, 79], [101, 6], [78, 38], [15, 12], [43, 22], [8, 39], [94, 44], [45, 1], [12, 76], [95, 12], [94, 35], [28, 72], [61, 47], [110, 1], [56, 64], [78, 81], [75, 91], [111, 54], [43, 67], [66, 4], [36, 25], [17, 26], [0, 76], [13, 78], [6, 64], [95, 67], [97, 26], [69, 89], [6, 45], [34, 69], [63, 44], [6, 70], [68, 56], [25, 87], [110, 23], [49, 22], [103, 26], [54, 65], [36, 26], [50, 18], [37, 86], [99, 70], [59, 13], [69, 87], [32, 4], [84, 35], [9, 81], [10, 40], [69, 10], [111, 69], [37, 87], [80, 73], [59, 4], [73, 59], [71, 87], [109, 39], [100, 48], [74, 23], [59, 88], [12, 91], [61, 10], [111, 84], [40, 79], [12, 49], [35, 58], [16, 51], [73, 23], [80, 76], [81, 17], [104, 73], [29, 35], [23, 34], [79, 44], [14, 43], [50, 66], [28, 82], [31, 79], [15, 38], [28, 43], [25, 79], [93, 21], [1, 64], [94, 46], [10, 85], [15, 44], [75, 2], [84, 45], [6, 73], [92, 28], [99, 89], [57, 60], [27, 4], [66, 2], [99, 12], [17, 68], [31, 68], [72, 70], [99, 82], [46, 48], [111, 72], [56, 47], [42, 89], [78, 78], [61, 49], [61, 68], [84, 40], [86, 85], [50, 39], [57, 46], [69, 5], [33, 66], [88, 76], [81, 46], [21, 82], [50, 30], [28, 78], [47, 79], [43, 86], [35, 40], [83, 5], [79, 38], [78, 27], [53, 68], [78, 17], [5, 72], [83, 15], [88, 75], [38, 0], [1, 80], [77, 76], [74, 61], [12, 52], [94, 2], [30, 24], [111, 0], [16, 58], [97, 34], [105, 21], [7, 55], [14, 85], [110, 31], [18, 4], [22, 22], [33, 8], [96, 8], [86, 39], [9, 58], [82, 7], [47, 76], [56, 46], [87, 81], [83, 86], [70, 20], [38, 62], [105, 16], [47, 66], [13, 2], [11, 90], [99, 30], [98, 36], [96, 16], [18, 29], [26, 39], [106, 60], [29, 74], [91, 25], [46, 42], [43, 22], [10, 9], [109, 54], [7, 49], [20, 59], [85, 90], [26, 12], [18, 27], [89, 49], [85, 16], [97, 64], [101, 7], [8, 59], [63, 79], [3, 46], [28, 89], [7, 45], [64, 56], [54, 38], [67, 54], [1, 40], [99, 38], [20, 40], [47, 68], [21, 51], [79, 86], [96, 60], [48, 59], [104, 22], [0, 88], [5, 40], [16, 30], [73, 42], [79, 88], [110, 80], [97, 62], [53, 31], [4, 63], [11, 81], [98, 90], [55, 18], [31, 49], [22, 82], [75, 4], [11, 23], [98, 2], [8, 79], [106, 34], [94, 40], [5, 76], [6, 70], [76, 91], [110, 78], [86, 15], [103, 54], [29, 21], [45, 21], [16, 23], [42, 60], [50, 29], [9, 65], [29, 60], [76, 74], [74, 91], [80, 9], [55, 34], [18, 27], [34, 31], [88, 85], [19, 29], [10, 10], [55, 74], [79, 81], [26, 33], [111, 87], [34, 66], [102, 38], [40, 64], [40, 33], [43, 43], [65, 69], [52, 13], [43, 33], [72, 24], [39, 9], [106, 75], [102, 24], [5, 79], [95, 73], [96, 34], [90, 16], [62, 2], [64, 63], [47, 39], [70, 89], [26, 89], [50, 75], [12, 91], [104, 69], [22, 42], [31, 27], [39, 51], [95, 31], [89, 46], [13, 17], [103, 64], [82, 56], [93, 30], [92, 72], [8, 31], [34, 69], [37, 82], [18, 34], [70, 88], [80, 22], [48, 1], [86, 12], [43, 39], [15, 14], [87, 37], [20, 49], [106, 75], [101, 49], [76, 36], [94, 17], [95, 18], [60, 76], [1, 61], [50, 19], [75, 60], [79, 39], [47, 90], [76, 84], [89, 57], [61, 43], [17, 84], [109, 36], [46, 19], [62, 47], [58, 28], [47, 13], [65, 26], [32, 16], [110, 70]]
    global mas
    a = mas[x][y]
    array = [[[0, 0, 0] for i in range(width)]for j in range(height)]
    for j in range(height):
        for i in range(width):
            if [i, j] in dotes:
                array[j][i][0] = a[j][i]
                array[j][i][1] = a[j][i]
                array[j][i][2] = a[j][i]
    array = np.array(array, dtype=np.uint8)
    img = Image.fromarray(array)
    img.save(output)


mas = read_all(40)
mas_sh = read_for_shatie(40)
for i in range(40):
    for j in range(10):
        shatie_img(f"img/mash/{i + 1}.{j + 1}.pgm", 23, 28, i, j)
        #rand_img(f"img/rand/{i + 1}.{j + 1}.pgm", 23 * 4, 28 * 4, i, j)
print()